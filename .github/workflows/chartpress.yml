name: Chartpress Publish
on: push
env:
  # STAGING_REGISTRY_NAME: lulcstagingacr
  STAGING_REGISTRY_NAME: lulcterraformacr
  STAGING_CLUSTER_NAME: lulcStagingAks3
  STAGING_MOSAIC_BACKEND: sqlite:///
  STAGING_MOSAIC_HOST: /tmp/data/mosaics.db
  STAGING_APPGW_NAME: lulcStagingApplicationGateway3
  # CLUSTER_RESOURCE_GROUP: lulcStaging
  CLUSTER_RESOURCE_GROUP: lulcterraformdev
  PRODUCTION_CLUSTER_RESOURCE_GROUP: lulcProduction
  PRODUCTION_CLUSTER_NAME: lulcProductionAks
  NAMESPACE: default
jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      TF_VAR_username: github
      servicePrincipalJSON: ${{ secrets.STAGING_SERVICE_PRINCIPAL_BASE64 }}
      subscriptionId: ${{ secrets.STAGING_APPGW_SUBSCRIPTION_ID }}
      tenantId: ${{ secrets.STAGING_TENANT_ID }}
      servicePrincipalId: ${{ secrets.STAGING_CLIENT_ID }}
      servicePrincipalKey: ${{ secrets.STAGING_CLIENT_SECRET }}
      storageAccessKey: ${{ secrets.TERRAFORM_STORAGE_KEY }}
    steps:
    - uses: actions/checkout@v1
    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.STAGING_REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.TERRAFORM_REGISTRY_USERNAME }}
        password: ${{ secrets.TERRAFORM_REGISTRY_PASSWORD }}
    - name: Setup python
      uses: actions/setup-python@v2
      with:
        python-version: '3.6'
    - name: Setup git
      run: git config --global user.email "noreply@developmentseed.org" && git config --global user.name "Github Action"
    - name: Create more disk space
      run: sudo rm -rf /usr/share/dotnet && sudo rm -rf /opt/ghc && sudo rm -rf "/usr/local/share/boost" && sudo rm -rf "$AGENT_TOOLSDIRECTORY"
    - name: Install Chartpress
      run: |
        pip install -v chartpress
    - name: Add ~/home/.local/bin to Github Path
      run: echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Build & Publish
      run: ./scripts/cipublish

    - name: Deploy -- Dev
      run: ./scripts/cideploy --dev
    # - name: Run Chartpress
    #   run: chartpress --push # should eventually --publish-chart
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}

    # - name: Test - substitute secrets
    #   if: startsWith(github.event.head_commit.message, '[deploy]')
    #   uses: bluwy/substitute-string-action@v1
    #   with:
    #     _input-file: './lulc-helm/values.dev.template.yaml'
    #     _format-key: '{{key}}'
    #     _output-file: './lulc-helm/values.dev.yaml'
    #     STAGING_SIGNING_SECRET: ${{ secrets.STAGING_SIGNING_SECRET }}
    #     TEST_POSTGRES: ${{ secrets.TEST_POSTGRES }}
    #     STAGING_MOSAIC_BACKEND: ${{ env.STAGING_MOSAIC_BACKEND }}
    #     STAGING_MOSAIC_HOST: ${{ env.STAGING_MOSAIC_HOST }}
    #     STAGING_APPGW_SUBSCRIPTION_ID: ${{ secrets.STAGING_APPGW_SUBSCRIPTION_ID }}
    #     STAGING_APPGW_RESOURCE_GROUP: ${{ env.CLUSTER_RESOURCE_GROUP }}
    #     STAGING_APPGW_NAME: ${{ env.STAGING_APPGW_NAME }}
    #     STAGING_SERVICE_PRINCIPAL_BASE64: ${{ secrets.STAGING_SERVICE_PRINCIPAL_BASE64 }}
    #     STAGING_TENANT_ID: ${{ secrets.STAGING_TENANT_ID }}
    #     STAGING_SUBSCRIPTION_ID: ${{ secrets.STAGING_APPGW_SUBSCRIPTION_ID }}
    #     CLUSTER_RESOURCE_GROUP: ${{ env.CLUSTER_RESOURCE_GROUP }}
    #     STAGING_CLIENT_ID: ${{ secrets.STAGING_CLIENT_ID }}
    #     STAGING_CLIENT_SECRET: ${{ secrets.STAGING_CLIENT_SECRET }}
    #     TEST_AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.TEST_AZURE_STORAGE_CONNECTION_STRING }}

    # - name: Staging - substitute secrets
    #   if: github.ref == 'refs/heads/develop'
    #   uses: bluwy/substitute-string-action@v1
    #   with:
    #     _input-file: './lulc-helm/values.staging.template.yaml'
    #     _format-key: '{{key}}'
    #     _output-file: './lulc-helm/values.staging.yaml'
    #     STAGING_SIGNING_SECRET: ${{ secrets.STAGING_SIGNING_SECRET }}
    #     STAGING_POSTGRES: ${{ secrets.STAGING_POSTGRES }}
    #     STAGING_MOSAIC_BACKEND: ${{ env.STAGING_MOSAIC_BACKEND }}
    #     STAGING_MOSAIC_HOST: ${{ env.STAGING_MOSAIC_HOST }}
    #     STAGING_APPGW_SUBSCRIPTION_ID: ${{ secrets.STAGING_APPGW_SUBSCRIPTION_ID }}
    #     STAGING_APPGW_RESOURCE_GROUP: ${{ env.CLUSTER_RESOURCE_GROUP }}
    #     STAGING_APPGW_NAME: ${{ env.STAGING_APPGW_NAME }}
    #     STAGING_SERVICE_PRINCIPAL_BASE64: ${{ secrets.STAGING_SERVICE_PRINCIPAL_BASE64 }}
    #     STAGING_TENANT_ID: $${{ secrets.STAGING_TENANT_ID }}
    #     STAGING_SUBSCRIPTION_ID: ${{ secrets.STAGING_APPGW_SUBSCRIPTION_ID }}
    #     CLUSTER_RESOURCE_GROUP: ${{ env.CLUSTER_RESOURCE_GROUP }}
    #     STAGING_CLIENT_ID: ${{ secrets.STAGING_CLIENT_ID }}
    #     STAGING_CLIENT_SECRET: ${{ secrets.STAGING_CLIENT_SECRET }}
    #     STAGING_AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.STAGING_AZURE_STORAGE_CONNECTION_STRING }}

    # - name: Production - substitute secrets
    #   if: github.ref == 'refs/heads/main'
    #   uses: bluwy/substitute-string-action@v1
    #   with:
    #     _input-file: './lulc-helm/values.prod.template.yaml'
    #     _format-key: '{{key}}'
    #     _output-file: './lulc-helm/values.prod.yaml'
    #     STAGING_SIGNING_SECRET: ${{ secrets.STAGING_SIGNING_SECRET }}
    #     PRODUCTION_POSTGRES: ${{ secrets.PRODUCTION_POSTGRES }}
    #     STAGING_MOSAIC_BACKEND: ${{ env.STAGING_MOSAIC_BACKEND }}
    #     STAGING_MOSAIC_HOST: ${{ env.STAGING_MOSAIC_HOST }}
    #     CLUSTER_RESOURCE_GROUP: ${{ env.PRODUCTION_CLUSTER_RESOURCE_GROUP }}
    #     PRODUCTION_CLIENT_ID: ${{ secrets.PRODUCTION_CLIENT_ID }}
    #     PRODUCTION_CLIENT_SECRET: ${{ secrets.PRODUCTION_CLIENT_SECRET }}
    #     PRODUCTION_AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.PRODUCTION_AZURE_STORAGE_CONNECTION_STRING }}
    #     STAGING_TENANT_ID: $${{ secrets.STAGING_TENANT_ID }}
    #     STAGING_SUBSCRIPTION_ID: ${{ secrets.STAGING_APPGW_SUBSCRIPTION_ID }}

    # - name: Production — set AKS context
    #   if: github.ref == 'refs/heads/main'
    #   uses: azure/aks-set-context@v1
    #   with:
    #     creds: '${{ secrets.AZURE_CREDENTIALS }}'
    #     cluster-name: ${{ env.PRODUCTION_CLUSTER_NAME }}
    #     resource-group: ${{ env.PRODUCTION_CLUSTER_RESOURCE_GROUP }}

    # - name: Staging / Test — set AKS context
    #   if: github.ref == 'refs/heads/develop' || startsWith(github.event.head_commit.message, '[deploy]')
    #   uses: azure/aks-set-context@v1
    #   with:
    #     creds: '${{ secrets.AZURE_CREDENTIALS }}'
    #     cluster-name: ${{ env.STAGING_CLUSTER_NAME }}
    #     resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}

    # - name: Production / Staging / Test - create image pull secret for ACR
    #   if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.event.head_commit.message, '[deploy]')
    #   uses: azure/k8s-create-secret@v1
    #   with:
    #     container-registry-url: ${{ env.STAGING_REGISTRY_NAME }}.azurecr.io
    #     container-registry-username: ${{ secrets.STAGING_REGISTRY_USERNAME }}
    #     container-registry-password: ${{ secrets.STAGING_REGISTRY_PASSWORD }}
    #     secret-name: ${{ env.STAGING_REGISTRY_NAME }}-registry-connection
    #     namespace: ${{ env.NAMESPACE }}

    # - name: Production — bake manifest
    #   if: github.ref == 'refs/heads/main'
    #   uses: azure/k8s-bake@v1
    #   with:
    #     renderEngine: 'helm'
    #     helmChart: './lulc-helm/'
    #     releaseName: lulc-production
    #     overrideFiles: './lulc-helm/values.prod.yaml'
    #     helm-version: 'latest'
    #   id: production-bake

    # - name: Staging — bake manifest
    #   if: github.ref == 'refs/heads/develop'
    #   uses: azure/k8s-bake@v1
    #   with:
    #     renderEngine: 'helm'
    #     helmChart: './lulc-helm/'
    #     releaseName: lulc-staging
    #     overrideFiles: './lulc-helm/values.staging.yaml'
    #     helm-version: 'latest'
    #   id: staging-bake

    # - name: Test — bake manifest
    #   if: startsWith(github.event.head_commit.message, '[deploy]')
    #   uses: azure/k8s-bake@v1
    #   with:
    #     renderEngine: 'helm'
    #     helmChart: './lulc-helm/'
    #     releaseName: lulc-test
    #     overrideFiles: './lulc-helm/values.dev.yaml'
    #     helm-version: 'latest'
    #     silent: 'false'
    #   id: test-bake

    # - name: Production - deploy
    #   uses: azure/k8s-deploy@v1
    #   if: github.ref == 'refs/heads/main'
    #   with:
    #     manifests: ${{ steps.production-bake.outputs.manifestsBundle }}
    #     imagepullsecrets: |
    #       ${{ env.STAGING_REGISTRY_NAME }}-registry-connection
    #     namespace: ${{ env.NAMESPACE }}

    # # Deploy app to staging AKS
    # - name: Staging - deploy
    #   uses: azure/k8s-deploy@v1
    #   if: github.ref == 'refs/heads/develop'
    #   with:
    #     manifests: ${{ steps.staging-bake.outputs.manifestsBundle }}
    #     imagepullsecrets: |
    #       ${{ env.STAGING_REGISTRY_NAME }}-registry-connection
    #     namespace: ${{ env.NAMESPACE }}

    # - name: Test - deploy
    #   uses: azure/k8s-deploy@v1
    #   if: startsWith(github.event.head_commit.message, '[deploy]')
    #   with:
    #     manifests: ${{ steps.test-bake.outputs.manifestsBundle }}
    #     imagepullsecrets: |
    #       ${{ env.STAGING_REGISTRY_NAME }}-registry-connection
    #     namespace: ${{ env.NAMESPACE }}