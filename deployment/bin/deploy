#!/bin/bash

source bin/lib

set -e

if [[ "${CI}" ]]; then
    set -x
fi

function usage() {
    echo -n \
        "Usage: $(basename "$0") -t TERRAFORM_DIR [--plan,--skip-tf]
Deploys the project infrastructure.

-t TERRAFORM_DIR: The terraform directory. Required.
--plan: Only run Terraform plan.
--skip-tf: Skips Terraform apply. Will still gather terraform output
"
}

###################
# Parse arguments #
###################

while [[ "$#" -gt 0 ]]; do case $1 in
    -t)
        TERRAFORM_DIR=${2}
        shift
        shift
        ;;
    --skip-tf)
        SKIP_TF=1
        shift
        ;;
    --plan)
        PLAN_ONLY=1
        shift
        ;;
    --destroy)
        DESTROY=1
        shift
        ;;
    --help)
        usage
        exit 0
        shift
        ;;
    *)
        usage "Unknown parameter passed: $1"
        shift
        shift
        ;;
    esac done

###################################
# Check and configure environment #
###################################

function require_env() {
    v=$(eval echo \$${1})

    if [[ -z ${v} ]]; then
        echo "Must set ${1} as environment variable" >&2
        exit 1
    fi
}

if [[ -z ${TERRAFORM_DIR} ]]; then
    echo "Must pass in TERRAFORM_DIR with -t"
    exit 1
fi

# Directory for rendered values and templates
CONF_DIR='/opt/conf'
mkdir -p ${CONF_DIR}

# Set up environment
setup_env

# Print some information

echo "===== Running Deploy ====="


# ---- TODO: Run Chartpress ------

# ---------------------------------------------------

if [ "${BASH_SOURCE[0]}" = "${0}" ]; then

    #####################
    # Deploy Terraform  #
    #####################

    pushd ${TERRAFORM_DIR}

    if [[ "${SKIP_TF}" != 1 ]]; then
        echo "Deploying infrastructure with Terraform..."
        terraform init

        if [ "${PLAN_ONLY}" ]; then
            terraform plan
            exit 0
        fi

        if [ "${DESTROY}" ]; then
            terraform destroy
            exit 0
        fi

        terraform apply -auto-approve
    fi

fi

